/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package YTDL;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.beans.PropertyChangeListener;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Action;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.SwingWorker;
import javax.swing.Timer;
import javax.swing.event.ListDataEvent;
import javax.swing.event.ListDataListener;

/**
 *
 * @author JoshuaSL
 */
public class UI extends javax.swing.JFrame {

    private final Dimension SystemscreenSize = Toolkit.getDefaultToolkit().getScreenSize();
    private final JPopupMenu popup = new JPopupMenu();
    static DefaultListModel listModel_queue = new DefaultListModel();
    static DefaultListModel listModel_output = new DefaultListModel();
    private static int quality;
//    private static int queueCount = 0;
    private QSelection qualitySelection = null;
    private Thread thread = null;
    private YTDL.YoutubeDL downloadProcess = null;
    private final ListDataListener QueueDListener = new ListDataListener() {
        @Override
        public void intervalAdded(ListDataEvent e) {
//            queueCount = listModel_queue.getSize();
            updateQueueCount();
        }

        @Override
        public void intervalRemoved(ListDataEvent e) {
//            queueCount = listModel_queue.getSize();
            updateQueueCount();
        }

        @Override
        public void contentsChanged(ListDataEvent e) {
            System.out.println("content changed");
        }
    };
//    private final ListDataListener OutputLDListener = new ListDataListener() {
//        @Override
//        public void intervalAdded(ListDataEvent e) {
//        }
//
//        @Override
//        public void intervalRemoved(ListDataEvent e) {
////            list_output.setModel(listModel_output);
//        }
//
//        @Override
//        public void contentsChanged(ListDataEvent e) {
//        }
//    };
    private SwingWorker<Void, Void> worker = null;

    /* size without queue is 756, 382 */
    /**
     * Creates new form UI
     */
    public UI() {
//        String[] m = new String[]{"1"};
        String[] m = new String[]{"1", "i26OAlozYrM", "3", "i26OAlozYrM", "5", "6", "7", "8", "9", "10", "11", "12", "13"};
//        String[] m = new String[]{"1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13"};

        initComponents();
        int i;
        for (i = 0; i < m.length; i++) {
            listModel_queue.addElement(m[i]);
        }
        listModel_queue.addListDataListener(QueueDListener);
//        listModel_output.addListDataListener(OutputLDListener);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        dialog_closeConfirm = new javax.swing.JDialog();
        jPanel2 = new javax.swing.JPanel();
        btn_Yay = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        btn_Nay = new javax.swing.JButton();
        buttonGroup1 = new javax.swing.ButtonGroup();
        frame_queue = new javax.swing.JFrame();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        scroll_queue = new javax.swing.JScrollPane();
        list_queue = new javax.swing.JList<>();
        btm_removeQueueItem = new javax.swing.JButton();
        panel_main = new javax.swing.JPanel();
        radio_mp3 = new javax.swing.JRadioButton();
        radio_240 = new javax.swing.JRadioButton();
        radio_360 = new javax.swing.JRadioButton();
        radio_480 = new javax.swing.JRadioButton();
        radio_720 = new javax.swing.JRadioButton();
        radio_best = new javax.swing.JRadioButton();
        txt_link = new javax.swing.JTextField();
        btn_download = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        list_output = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        radio_video = new javax.swing.JRadioButton();
        lbl_queueCount = new javax.swing.JLabel();
        lbl_downPath = new javax.swing.JLabel();
        btn_browseFolder = new javax.swing.JButton();
        toggle_queue = new javax.swing.JToggleButton();
        btn_addQueue = new javax.swing.JButton();
        combo_quality = new javax.swing.JComboBox<>();
        check_advanceQuality = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        jFileChooser1.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
        jFileChooser1.setMaximumSize(new java.awt.Dimension(500, 326));

        dialog_closeConfirm.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        dialog_closeConfirm.setTitle("Confirm Action");
        dialog_closeConfirm.setAlwaysOnTop(true);
        dialog_closeConfirm.setLocation(SystemscreenSize.width/3,SystemscreenSize.height/3
        );
        dialog_closeConfirm.setMaximumSize(new java.awt.Dimension(360, 142));
        dialog_closeConfirm.setMinimumSize(new java.awt.Dimension(360, 142));
        dialog_closeConfirm.setResizable(false);
        dialog_closeConfirm.setSize(new java.awt.Dimension(360, 142));
        dialog_closeConfirm.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setMaximumSize(new java.awt.Dimension(360, 140));
        jPanel2.setMinimumSize(new java.awt.Dimension(360, 140));

        btn_Yay.setText("Yes");
        btn_Yay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_YayActionPerformed(evt);
            }
        });

        jLabel3.setText("Are you sure you want to close the program?");

        btn_Nay.setText("No");
        btn_Nay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_NayActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap(21, Short.MAX_VALUE)
                        .addComponent(jLabel3))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(btn_Yay, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(btn_Nay, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(20, 20, 20))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(29, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_Yay, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_Nay, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43))
        );

        dialog_closeConfirm.getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 360, 140));

        dialog_closeConfirm.getAccessibleContext().setAccessibleDescription("");

        frame_queue.setMinimumSize(new java.awt.Dimension(792, 250));
        frame_queue.addWindowStateListener(new java.awt.event.WindowStateListener() {
            public void windowStateChanged(java.awt.event.WindowEvent evt) {
                frame_queueWindowStateChanged(evt);
            }
        });
        frame_queue.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                frame_queueWindowClosed(evt);
            }
        });

        scroll_queue.setBackground(new java.awt.Color(255, 255, 255));
        scroll_queue.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        scroll_queue.setViewportBorder(javax.swing.BorderFactory.createEtchedBorder());
        scroll_queue.setAutoscrolls(true);
        scroll_queue.setDoubleBuffered(true);
        scroll_queue.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N

        list_queue.setModel(listModel_queue);
        scroll_queue.setViewportView(list_queue);

        btm_removeQueueItem.setText("Remove from queue");
        btm_removeQueueItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btm_removeQueueItemActionPerformed(evt);
            }
        });

        jLayeredPane1.setLayer(scroll_queue, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(btm_removeQueueItem, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addComponent(scroll_queue, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(btm_removeQueueItem)
                .addContainerGap())
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addGap(97, 97, 97)
                .addComponent(btm_removeQueueItem)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(scroll_queue, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout frame_queueLayout = new javax.swing.GroupLayout(frame_queue.getContentPane());
        frame_queue.getContentPane().setLayout(frame_queueLayout);
        frame_queueLayout.setHorizontalGroup(
            frame_queueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1)
        );
        frame_queueLayout.setVerticalGroup(
            frame_queueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1)
        );

        setLocation((int)(Toolkit.getDefaultToolkit().getScreenSize().getWidth())/4,(int)(Toolkit.getDefaultToolkit().getScreenSize().getHeight())/3);
        setName("frame_main"); // NOI18N
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        panel_main.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        panel_main.setMaximumSize(new java.awt.Dimension(756, 382));
        panel_main.setMinimumSize(new java.awt.Dimension(756, 382));
        panel_main.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        buttonGroup1.add(radio_mp3);
        radio_mp3.setText("mp3 only");
        panel_main.add(radio_mp3, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 155, -1, -1));

        buttonGroup1.add(radio_240);
        radio_240.setText("240p");
        radio_240.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                radio_240ItemStateChanged(evt);
            }
        });
        panel_main.add(radio_240, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 208, -1, -1));

        buttonGroup1.add(radio_360);
        radio_360.setSelected(true);
        radio_360.setText("360p");
        radio_360.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                radio_360ItemStateChanged(evt);
            }
        });
        panel_main.add(radio_360, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 235, -1, -1));

        buttonGroup1.add(radio_480);
        radio_480.setText("480p");
        radio_480.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                radio_480ItemStateChanged(evt);
            }
        });
        panel_main.add(radio_480, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 262, -1, -1));

        buttonGroup1.add(radio_720);
        radio_720.setText("720p");
        radio_720.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                radio_720ItemStateChanged(evt);
            }
        });
        panel_main.add(radio_720, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 289, -1, -1));

        buttonGroup1.add(radio_best);
        radio_best.setText("Best Quality");
        radio_best.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                radio_bestItemStateChanged(evt);
            }
        });
        panel_main.add(radio_best, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 316, -1, -1));

        txt_link.setText("paste your download link here");
        txt_link.setToolTipText("paste your download link here");
        txt_link.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txt_linkFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_linkFocusLost(evt);
            }
        });
        panel_main.add(txt_link, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 74, 540, 30));

        btn_download.setText("Download");
        btn_download.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_downloadActionPerformed(evt);
            }
        });
        panel_main.add(btn_download, new org.netbeans.lib.awtextra.AbsoluteConstraints(592, 64, 126, -1));

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setViewportBorder(javax.swing.BorderFactory.createEtchedBorder());
        jScrollPane1.setAutoscrolls(true);
        jScrollPane1.setDoubleBuffered(true);
        jScrollPane1.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        jScrollPane1.setHorizontalScrollBar(null);

        list_output.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        list_output.setModel(listModel_output);
        list_output.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        list_output.setVisibleRowCount(0);
        jScrollPane1.setViewportView(list_output);

        panel_main.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 131, 540, 208));

        jLabel1.setText("select download quality");
        panel_main.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(574, 132, -1, -1));

        buttonGroup1.add(radio_video);
        radio_video.setText("video only");
        panel_main.add(radio_video, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 181, -1, -1));

        lbl_queueCount.setText("0");
        panel_main.add(lbl_queueCount, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 350, 40, 25));

        lbl_downPath.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panel_main.add(lbl_downPath, new org.netbeans.lib.awtextra.AbsoluteConstraints(163, 21, 390, 25));

        btn_browseFolder.setText("Browse");
        btn_browseFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_browseFolderActionPerformed(evt);
            }
        });
        panel_main.add(btn_browseFolder, new org.netbeans.lib.awtextra.AbsoluteConstraints(611, 21, -1, -1));

        toggle_queue.setText("Display Queue");
        toggle_queue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggle_queueActionPerformed(evt);
            }
        });
        panel_main.add(toggle_queue, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 350, 136, 25));

        btn_addQueue.setText("Add to Queue");
        btn_addQueue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_addQueueActionPerformed(evt);
            }
        });
        panel_main.add(btn_addQueue, new org.netbeans.lib.awtextra.AbsoluteConstraints(592, 95, -1, -1));

        combo_quality.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select quality", "m4a_audio-48k ", "m4a_audio-128k ", "m4a_audio-256k ", "webm_audio-128k ", "webm_audio-50k ", "webm_audio-70k ", "mp4_video-240p ", "mp4_video-360p ", "mp4_video-480p ", "mp4_video-720p ", "mp4_video-1080p ", "mp4_video-2160p60 ", "mp4_video-144p ", "mp4_video-1440p ", "mp4_video-2160p60 ", "mp4_video-720p60 ", "mp4_video-1080p60 ", "webm_video-360p ", "webm_video-480p ", "webm_video-1080p ", "webm_video-480p ", "webm_video-144p ", "webm_video-240p ", "webm_video-360p ", "webm_video-480p ", "webm_video-480p ", "webm_video-480p ", "webm_video-720p ", "webm_video-1080p ", "webm_video-1440p ", "webm_video-4320p ", "webm_video-144p ", "webm_video-720p60 ", "webm_video-1080p60 ", "webm_video-1440p60 ", "webm_video-2160p ", "webm_video-2160p60 ", "webm_video-144p60-hdr", "webm_video-240p60-hdr", "webm_video-360p60-hdr", "webm_video-480p60-hdr", "webm_video-720p60-hdr", "webm_video-1080p60-hdr", "webm_video-1440p60-hdr", "webm_video-2160p60-hdr", "3gp_audio/video-144p", "3gp_audio/video-180p", "flv_audio/video-240p", "flv_audio/video-270p", "flv_audio/video-360p", "flv_audio/video-480p", "hls_audio/video-240p-3D", "hls_audio/video-360p-3D", "hls_audio/video-480p-3D", "hls_audio/video-720p-3D", "hls_audio/video-1080p", "hls_audio/video-240p", "hls_audio/video-72p", "mp4_audio/video-360p", "mp4_audio/video-720p", "mp4_audio/video-1080p", "mp4_audio/video-3072p", "mp4_audio/video-360p-3D", "mp4_audio/video-480p-3D", "mp4_audio/video-720p-3D", "mp4_audio/video-1080p-3D", "webm_audio/video-360p", "webm_audio/video-480p", "webm_audio/video-720p", "webm_audio/video-1080p", "webm_audio/video-360p-3D", "webm_audio/video-480p-3D", "webm_audio/video-720p-3D" }));
        combo_quality.setEnabled(false);
        combo_quality.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                combo_qualityItemStateChanged(evt);
            }
        });
        panel_main.add(combo_quality, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 350, 230, 30));

        check_advanceQuality.setText("Advanced Selection:");
        check_advanceQuality.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                check_advanceQualityItemStateChanged(evt);
            }
        });
        panel_main.add(check_advanceQuality, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 350, 180, 30));

        jLabel4.setText("Download Location: ");
        panel_main.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 21, -1, 25));

        jLabel5.setText("Queue: ");
        panel_main.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 350, 70, 25));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel_main, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel_main, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param queuecount variable is maintained by the List Data Listener
     */
    private void updateQueueCount() {
        lbl_queueCount.setText(String.valueOf(listModel_queue.getSize()));
    }

    private void radio_240ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_radio_240ItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            JOptionPane.showMessageDialog(null, "Selected 240p FLV video quality");
            UI.quality = 5; // refer to youtube format itags list
        }
    }//GEN-LAST:event_radio_240ItemStateChanged

    private void txt_linkFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_linkFocusGained
        if (txt_link.getText().equals("paste your download link here")) {
            txt_link.setText("");
        }

    }//GEN-LAST:event_txt_linkFocusGained

    private void txt_linkFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_linkFocusLost
        if (!txt_link.getText().equals("paste your download link here")) {
            if (txt_link.getText().trim().isEmpty()) {
                txt_link.setText("paste your download link here");
            }
        }
    }//GEN-LAST:event_txt_linkFocusLost

    private void btn_browseFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_browseFolderActionPerformed

        popup.add(jFileChooser1);
        popup.setLocation(SystemscreenSize.width / 3, SystemscreenSize.height / 3); //setting location to approximately 1/3 of screen size

        popup.setVisible(true);

        if (jFileChooser1.getActionListeners().length == 0) {
            System.out.println("action listeners not available, creating now");

            jFileChooser1.addActionListener(new Action() {

                // <editor-fold defaultstate="collapsed" desc="Generated Code">
                @Override
                public Object getValue(String key) {
                    throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                }

                @Override
                public void putValue(String key, Object value) {
                    throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                }

                @Override
                public void setEnabled(boolean b) {
                    throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                }

                @Override
                public boolean isEnabled() {
                    throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                }

                @Override
                public void addPropertyChangeListener(PropertyChangeListener listener) {
                    throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                }

                @Override
                public void removePropertyChangeListener(PropertyChangeListener listener) {
                    throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                }
//</editor-fold>

                @Override
                public void actionPerformed(ActionEvent e) {
//                    System.out.println(e.getActionCommand());

                    if (e.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) {

                        lbl_downPath.setText(jFileChooser1.getSelectedFile().getAbsolutePath());
                        popup.setVisible(false);

                    } else if (e.getActionCommand().equals(JFileChooser.CANCEL_SELECTION)) {
                        popup.setVisible(false);
                    }
                }
            });
        }

        System.gc();
    }//GEN-LAST:event_btn_browseFolderActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing

        dialog_closeConfirm.setVisible(true);

    }//GEN-LAST:event_formWindowClosing

    private void btn_NayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_NayActionPerformed
        dialog_closeConfirm.dispose();
        frame_queue.setVisible(true);
        UI.this.setVisible(true);
    }//GEN-LAST:event_btn_NayActionPerformed

    private void btn_YayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_YayActionPerformed
        dialog_closeConfirm.dispose();
        frame_queue.dispose();
        UI.this.dispose();
        System.gc();
    }//GEN-LAST:event_btn_YayActionPerformed

    private void toggle_queueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggle_queueActionPerformed

        if (!frame_queue.isVisible()) {
            frame_queue.setVisible(true);
            toggle_queue.setText("Hide Queue");
            frame_queue.setSize(792, 250);
            frame_queue.setLocation(panel_main.getLocation().x, (int) (panel_main.getSize().getHeight()));
        } else {
            frame_queue.setVisible(false);
            frame_queue.invalidate();
            toggle_queue.setText("Display Queue");
        }
    }//GEN-LAST:event_toggle_queueActionPerformed

    private void btn_addQueueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_addQueueActionPerformed

        addLinkToQueue();

    }//GEN-LAST:event_btn_addQueueActionPerformed

    private void btm_removeQueueItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btm_removeQueueItemActionPerformed

        if (!list_queue.isSelectionEmpty()) {
            listModel_queue.remove(list_queue.getSelectedIndex());
            list_queue.setModel(listModel_queue);
            updateQueueCount();
        }

    }//GEN-LAST:event_btm_removeQueueItemActionPerformed

    private void radio_480ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_radio_480ItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            JOptionPane.showMessageDialog(null, "Selected 480p video quality, FLV format");
            UI.quality = 35; // refer to youtube format itags list
        }
    }//GEN-LAST:event_radio_480ItemStateChanged

    private void radio_720ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_radio_720ItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            JOptionPane.showMessageDialog(null, "Selected 720p video quality, MP4 format");
            UI.quality = 22; // refer to youtube format itags list
        }
    }//GEN-LAST:event_radio_720ItemStateChanged

    private void radio_bestItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_radio_bestItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            JOptionPane.showMessageDialog(null, "Selected Best video quality, MP4 format \nPlease note that \"Best\" quality may not always refer to HD quality");
            UI.quality = 22; // refer to youtube format itags list
        }
    }//GEN-LAST:event_radio_bestItemStateChanged

    private void radio_360ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_radio_360ItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            JOptionPane.showMessageDialog(null, "Selected 360p video quality, MP4 format");
            UI.quality = 18; // refer to youtube format itags list
        }
    }//GEN-LAST:event_radio_360ItemStateChanged

    private void combo_qualityItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_combo_qualityItemStateChanged
//        UI.quality = evt.getItem().toString();
//        System.out.println(evt.paramString());  gives debugging information of the selection
        if (evt.getStateChange() == ItemEvent.SELECTED) {

            System.out.println("item selection: " + evt.getItem());
            System.out.println("index: " + combo_quality.getSelectedIndex());

            UI.quality = qualitySelection.getFormatCode(combo_quality.getSelectedIndex());

        }

    }//GEN-LAST:event_combo_qualityItemStateChanged

    private void check_advanceQualityItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_check_advanceQualityItemStateChanged

        if (evt.getStateChange() == ItemEvent.SELECTED) {
            disableRadios(true); // disabling radio buttons
            combo_quality.setEnabled(true);

            if (qualitySelection == null) {
                qualitySelection = new QSelection();
                qualitySelection.initialize();
            }

        } else if (evt.getStateChange() == ItemEvent.DESELECTED) {
            disableRadios(false); //enabling radio buttons

            combo_quality.setEnabled(false);
            combo_quality.setSelectedIndex(0);
//            System.out.println("deselected");
        }
    }//GEN-LAST:event_check_advanceQualityItemStateChanged

    private void disableRadios(boolean b) {
        if (b == true) {
            radio_mp3.setEnabled(false);
            radio_video.setEnabled(false);
            radio_240.setEnabled(false);
            radio_360.setEnabled(false);
            radio_480.setEnabled(false);
            radio_720.setEnabled(false);
            radio_best.setEnabled(false);
        } else {
            radio_mp3.setEnabled(true);
            radio_video.setEnabled(true);
            radio_240.setEnabled(true);
            radio_360.setEnabled(true);
            radio_480.setEnabled(true);
            radio_720.setEnabled(true);
            radio_best.setEnabled(true);
        }
    }

    private void disableBrowse_dropDown(boolean b) {
        if (b == true) {
            btn_browseFolder.setEnabled(false);
//            combo_quality.setEnabled(false);
        } else {
            btn_browseFolder.setEnabled(true);
//            combo_quality.setEnabled(true);
        }
    }

    private void addLinkToQueue() {
        if (!txt_link.getText().equals("paste your download link here") & !txt_link.getText().trim().isEmpty()) {

            if (listModel_queue.indexOf(txt_link.getText()) == -1) {
                listModel_queue.addElement(txt_link.getText());
                updateQueueCount();
                txt_link.setText("paste your download link here");
            } else {
                System.out.println(listModel_output.indexOf(txt_link.getText().trim()));
                JOptionPane.showMessageDialog(null, "Link already exists in the Queue", "Existing link", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Type in a link to add to Queue", "No Download link", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void btn_downloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_downloadActionPerformed

        if (!txt_link.getText().equals("paste your download link here") & !txt_link.getText().trim().isEmpty()) {
            if (listModel_queue.indexOf(txt_link.getText()) == -1) {
                
                if (radio_360.isSelected() & radio_360.isEnabled()) {
                    UI.quality = 18; // 18	|mp4|	audio/video| 360p
                    JOptionPane.showMessageDialog(null, "MP4 , 360p video quality is set as default");

                } else if (check_advanceQuality.isSelected()) {
                    JOptionPane.showMessageDialog(null, "Advanced quality is selected from the list\n"
                            + "" + combo_quality.getSelectedItem().toString());
                }

                if (listModel_queue.isEmpty()) {

                    try {
                        worker = new SwingWorker<Void, Void>() {
                            @Override
                            protected Void doInBackground() throws Exception {
                                initiateDownload(txt_link.getText());
                                return null;
                            }
                        };
                        worker.execute();
                    } catch (Exception ex) {
//                    System.out.println("ERROR HERE----------------------------------------------------");
                        Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {

                    addLinkToQueue(); //first add the link to queue and then start downloading

                    try {
                        worker = new SwingWorker<Void, Void>() {
                            @Override
                            protected Void doInBackground() throws Exception {
                                for (int index = 0; index < listModel_queue.getSize();) {
                                    System.out.println("DOWNLOADING FROM QUEUE---" + listModel_queue.getElementAt(index).toString());
                                    initiateDownload(listModel_queue.getElementAt(index).toString()); //sending index+1 so it will reflect correct item number in list

                                    listModel_queue.removeElementAt(index);
//                            new Timer(3000, null).start();
                                }
                                return null;
                            }
                        };
                        worker.execute();
                        /*    Thread.sleep() is done on the Event Dispatch Thread which will lock the GUI.
   *    So If you need to wait for a specific amount of time, don't sleep in the event dispatch thread. Instead, use a timer.
   *             
   *     int delay = 1000; //milliseconds
   *     ActionListener taskPerformer = new ActionListener() {
   *     public void actionPerformed(ActionEvent evt) {
   *       //...Perform a task...
   *         }
   *     };
   *       new Timer(delay, taskPerformer).start();
                         */
                    } catch (Exception ex) {
                        Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
//                        System.out.println("ERROR HERE----------------------------------------------------");
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "Link already exists in the Queue", "Existing link", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Add a link to download", "No Download link", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btn_downloadActionPerformed

    private void frame_queueWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_frame_queueWindowClosed

    }//GEN-LAST:event_frame_queueWindowClosed

    private void frame_queueWindowStateChanged(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_frame_queueWindowStateChanged
    }//GEN-LAST:event_frame_queueWindowStateChanged

    private void initiateDownload(String link) {

        if (!listModel_output.isEmpty()) {
            listModel_output.addElement("-");
            listModel_output.addElement("-");
        }
        listModel_output.addElement("Downloading : " + link);
        listModel_output.addElement("***************************");
//        listModel_output.removeAllElements(); //setting the model to the JList, is done by the listDataListener for the DefaultListModel, so below line is not necessary
//        list_output.setModel(listModel_output);

        disableRadios(true); // disabling radio buttons 
        disableBrowse_dropDown(true); //disabling browse location button and drop down list:quality

        if (downloadProcess == null) {
            System.out.println("************************************************downloadProcess is NULL***********************");
            downloadProcess = new YTDL.YoutubeDL();
        }

        thread = new Thread(downloadProcess); //the download process is initialized here

        if (lbl_downPath.getText().trim().isEmpty()) {
            lbl_downPath.setText(System.getProperty("user.home"));
            JOptionPane.showMessageDialog(null, "Home folder is set as the default download location");
        }

        try {
            if (!downloadProcess.isBuffReaderNull() | !thread.getState().equals("TERMINATED")) {
//                System.out.println("buffered reader is not null");

                //setting download link and download folder path
                downloadProcess.setValues(link, lbl_downPath.getText());
                downloadProcess.setQuality(quality);

                thread.start();
                downloadProcess.terminate();

                thread.join();
                System.out.println("Thread is: " + thread.getState());
            }

        } catch (InterruptedException ex) {
            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
        }
//downloadProcess=null;
        System.gc();
        disableRadios(false);//enabling radio buttons back
        disableBrowse_dropDown(false);

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("classic".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
            javax.swing.UIManager.setLookAndFeel("com.jtattoo.plaf.hifi.HiFiLookAndFeel");
//                    break;
//                }
//            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new UI().setVisible(true);

            }
        });
    }

// <editor-fold defaultstate="collapsed" desc="Generated Code--Variables declaration">
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btm_removeQueueItem;
    private javax.swing.JButton btn_Nay;
    private javax.swing.JButton btn_Yay;
    private javax.swing.JButton btn_addQueue;
    private javax.swing.JButton btn_browseFolder;
    private javax.swing.JButton btn_download;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox check_advanceQuality;
    private javax.swing.JComboBox<String> combo_quality;
    private javax.swing.JDialog dialog_closeConfirm;
    private javax.swing.JFrame frame_queue;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbl_downPath;
    private javax.swing.JLabel lbl_queueCount;
    protected static javax.swing.JList<String> list_output;
    private javax.swing.JList<String> list_queue;
    private javax.swing.JPanel panel_main;
    private javax.swing.JRadioButton radio_240;
    private javax.swing.JRadioButton radio_360;
    private javax.swing.JRadioButton radio_480;
    private javax.swing.JRadioButton radio_720;
    private javax.swing.JRadioButton radio_best;
    private javax.swing.JRadioButton radio_mp3;
    private javax.swing.JRadioButton radio_video;
    private javax.swing.JScrollPane scroll_queue;
    private javax.swing.JToggleButton toggle_queue;
    private javax.swing.JTextField txt_link;
    // End of variables declaration//GEN-END:variables

// </editor-fold>>
}
